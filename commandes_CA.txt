# Ce fichier contient les commandes utilisées pour la création de notre CA:
# Il se base surtout sur ce qui a été vu en TP5

# génère une clé privée basée sur les courbes éelliptiques (dans ce cas la courbe prime256v1)
openssl ecparam -out ecc.ca.key.pem -name prime256v1 -genkey

# génère une AC avec la clé privée générée plus haut
openssl req -config <(printf "[req]\ndistinguished_name=dn\n[dn]\n[ext]\nbasicConstraints=CA:TRUE") -new -nodes -subj "/C=FR/L=Limoges/O=CRYPTIS/OU=SecuTIC/CN=localhost" -x509 -extensions ext -sha256 -key ecc.ca.key.pem -text -out ecc.ca.cert.pem -passin pass:TIC2021

#Pour créer les certificats(serveurs)
openssl req -config <(printf "[req]\ndistinguished_name=dn\n[dn]\n[ext]\nbasicConstraints=CA:FALSE") -new -subj "/C=FR/L=Limoges/O=CRYPTIS/OU=SecuTIC/CN=localhost" -reqexts ext -sha256 -key ecc.ca.key.pem -text -out ecc.csr.pem -passin pass:TIC2021

openssl x509 -req -days 3650 -CA ecc.ca.cert.pem -CAkey ecc.ca.key.pem -CAcreateserial -extfile <(printf "basicConstraints=critical,CA:FALSE\nkeyUsage=critical,digitalSignature") -in ecc.csr.pem -text -out ecc.serveur_applicatif.pem -passin pass:TIC2021

openssl x509 -req -days 3650 -CA ecc.ca.cert.pem -CAkey ecc.ca.key.pem -CAcreateserial -extfile <(printf "basicConstraints=critical,CA:FALSE") -in ecc.csr.pem -text -out ecc.serveur_frontal.pem -passin pass:TIC2021

# Clé publique pour le serveur applicatif
openssl x509 -pubkey -noout -in ecc.serveur_applicatif.pem -out ecc.pubkey.serveur_applicatif.pem

#Création du bundle
cat ecc.ca.key.pem ecc.serveur_frontal.pem > bundle_serveur_frontal.pem

